@if (isEditing)
{
    <QuoteEditorBlazor.Shared.LineItemDates.Edit
        LineItemDateToEdit="LineItemDateToShow"
        OnLineItemDateUpdated="NotifyLineItemDateUpdated"
        OnCancel="HideEditForm"
    />
}
else
{
    <div class="line-item-date">
        <div class="line-item-date__header">
            <h2 class="line-item-date__title">
                @LineItemDateToShow.Date
            </h2>

            <div class="line-item-date__actions">
                <a class="btn btn--light" @onclick="DeleteLineItemDate" href="/quotes/@LineItemDateToShow.QuoteID/line_item_dates/@LineItemDateToShow.ID/delete">Delete</a>
                <a class="btn btn--light" @onclick="ShowEditForm">Edit</a>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public QuoteEditorBlazor.Models.LineItemDate LineItemDateToShow { get; set; }

    [Parameter]
    public EventCallback OnLineItemDateUpdated { get; set; }

    [Parameter]
    public EventCallback OnLineItemDateDeleted { get; set; }

    bool isEditing = false;

    void ShowEditForm()
    {
        isEditing = true;
    }

    void HideEditForm()
    {
        isEditing = false;
    }

    void NotifyLineItemDateUpdated()
    {
        HideEditForm();
        OnLineItemDateUpdated.InvokeAsync();
    }

    void DeleteLineItemDate()
    {
        Console.WriteLine("called DeleteLineItemDate");
        /*context.Quotes.Remove(QuoteToShow);
        context.SaveChanges();
        OnQuoteDeleted.InvokeAsync();*/
    }
}