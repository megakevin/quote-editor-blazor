@using Microsoft.EntityFrameworkCore

@inject QuoteEditorBlazor.Data.QuoteEditorContext context

<div class="line-item-date">
    @if (isEditing)
    {
        <QuoteEditorBlazor.Shared.LineItemDates.Edit
            LineItemDateToEdit="LineItemDateToShow"
            OnLineItemDateUpdated="NotifyLineItemDateUpdated"
            OnCancel="HideEditForm"
        />
    }
    else
    {
        <div class="line-item-date__header">
            <h2 class="line-item-date__title">
                @LineItemDateToShow.Date
            </h2>

            <div class="line-item-date__actions">
                <a class="btn btn--light" @onclick="DeleteLineItemDate">Delete</a>
                <a class="btn btn--light" @onclick="ShowEditForm">Edit</a>
            </div>
        </div>
    }

    <div class="line-item-date__body">
        <div class="line-item line-item--header">
            <div class="line-item__name">Article</div>
            <div class="line-item__quantity">Quantity</div>
            <div class="line-item__price">Price</div>
            <div class="line-item__actions"></div>
        </div>

        @if (lineItems != null)
        {
            @foreach (var lineItem in lineItems)
            {
                <QuoteEditorBlazor.Shared.LineItems.LineItem
                    LineItemToShow="lineItem"
                />
            }
        }

        @if (shouldShowNewLineItemForm)
        {
            <QuoteEditorBlazor.Shared.LineItems.New
                LineItemDate="LineItemDateToShow"
                OnLineItemCreated="OnLineItemCreated"
                OnCancel="HideNewLineItemForm"
            />
        }

        <div class="line-item-date__footer">
            <a class="btn btn--primary" @onclick="ShowNewLineItemForm">Add item</a>
        </div>
    </div>

</div>

@code {
    [Parameter]
    public QuoteEditorBlazor.Models.LineItemDate LineItemDateToShow { get; set; }

    [Parameter]
    public EventCallback OnLineItemDateUpdated { get; set; }

    [Parameter]
    public EventCallback OnLineItemDateDeleted { get; set; }

    ICollection<QuoteEditorBlazor.Models.LineItem> lineItems = new List<QuoteEditorBlazor.Models.LineItem>();

    bool isEditing = false;
    bool shouldShowNewLineItemForm = false;

    protected override async Task OnInitializedAsync()
    {
        lineItems = LineItemDateToShow.LineItems;
    }

    void ShowEditForm()
    {
        isEditing = true;
    }

    void HideEditForm()
    {
        isEditing = false;
    }

    void ShowNewLineItemForm()
    {
        shouldShowNewLineItemForm = true;
    }

    void HideNewLineItemForm()
    {
        shouldShowNewLineItemForm = false;
    }

    void NotifyLineItemDateUpdated()
    {
        HideEditForm();
        OnLineItemDateUpdated.InvokeAsync();
    }

    void DeleteLineItemDate()
    {
        context.LineItemDates.Remove(LineItemDateToShow);
        context.SaveChanges();
        OnLineItemDateDeleted.InvokeAsync();
    }

    async void OnLineItemCreated()
    {
        //flashState.AddMessage("Date was successfully created.");

        HideNewLineItemForm();
        //await NotifyQuotesChanged(); TODO: SignalR
        await LoadData();
    }

    async Task LoadData()
    {
        lineItems = await context.LineItems
            .Where(li => li.LineItemDateID == LineItemDateToShow.ID)
            .OrderBy(li => li.ID)
            .ToListAsync();

        StateHasChanged();
    }
}