@using Microsoft.EntityFrameworkCore
@using QuoteEditorBlazor.Areas.Identity.Claims

@inject IDbContextFactory<QuoteEditorBlazor.Data.QuoteEditorContext> dbContextFactory

<QuoteEditorBlazor.Shared.Quotes.Form
    QuoteToEdit="quote"
    OnSubmit="CreateQuote"
    OnCancel="OnCancel"
    SubmitText="Create"
/>

@code {
    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public EventCallback OnQuoteCreated { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    QuoteEditorBlazor.Models.Quote quote = new QuoteEditorBlazor.Models.Quote();

    async Task CreateQuote()
    {
        var authState = await authenticationStateTask;
        if (!authState.User.Identity.IsAuthenticated) return;

        var currentCompanyId = authState.User.GetCompanyID();
        quote.CompanyID = int.Parse(currentCompanyId);

        using var context = dbContextFactory.CreateDbContext();
        context.Quotes.Add(quote);
        context.SaveChanges();
        OnQuoteCreated.InvokeAsync();
    }
}
