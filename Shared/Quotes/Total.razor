@using Microsoft.EntityFrameworkCore
@using QuoteEditorBlazor.AppState

@implements IDisposable

@inject IDbContextFactory<QuoteEditorBlazor.Data.QuoteEditorContext> dbContextFactory
@inject QuoteTotalEventBus quoteTotalEventBus

<footer class="quote-total">
  <div class="quote-total__inner container">
    <div>Total:</div>
    <div>
        @if(quote != null) { @quote.TotalPrice }
    </div>
  </div>
</footer>

@code {
    [Parameter]
    public int QuoteId { get; set; }

    QuoteEditorBlazor.Models.Quote quote;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        quoteTotalEventBus.TotalChanged += OnTotalChanged;
    }

    public void Dispose()
    {
        quoteTotalEventBus.TotalChanged -= OnTotalChanged;
    }

    void OnTotalChanged()
    {
        LoadData();
    }

    async Task LoadData()
    {
        using var context = dbContextFactory.CreateDbContext();
        quote = await context.Quotes
            .Include(q => q.LineItemDates)
            .ThenInclude(lid => lid.LineItems)
            .FirstAsync(q => q.ID == QuoteId);

        StateHasChanged();
    }
}