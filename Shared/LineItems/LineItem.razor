@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<QuoteEditorBlazor.Data.QuoteEditorContext> dbContextFactory

@if (isEditing)
{
    <QuoteEditorBlazor.Shared.LineItems.Edit
        LineItemToEdit="LineItemToShow"
        OnLineItemUpdated="NotifyLineItemUpdated"
        OnCancel="HideEditForm"
    />
}
else
{
    <div class="line-item">
        <div class="line-item__name">
            @LineItemToShow.Name
            <div class="line-item__description">
                @* <%= simple_format line_item.description %> *@
                @LineItemToShow.Description
            </div>
        </div>
        <div class="line-item__quantity-price">
            @LineItemToShow.Quantity
            &times;
            @string.Format("{0:C}", LineItemToShow.UnitPrice)
        </div>
        <div class="line-item__quantity">
            @LineItemToShow.Quantity
        </div>
        <div class="line-item__price">
            @string.Format("{0:C}", LineItemToShow.UnitPrice)
        </div>
        <div class="line-item__actions">
            <a class="btn btn--light" @onclick="DeleteLineItem">Delete</a>
            <a class="btn btn--light" @onclick="ShowEditForm">Edit</a>
        </div>
    </div>
}

@code {
    [Parameter]
    public QuoteEditorBlazor.Models.LineItem LineItemToShow { get; set; }

    [Parameter]
    public EventCallback OnLineItemUpdated { get; set; }

    [Parameter]
    public EventCallback OnLineItemDeleted { get; set; }

    bool isEditing = false;

    void ShowEditForm()
    {
        isEditing = true;
    }

    void HideEditForm()
    {
        isEditing = false;
    }

    void NotifyLineItemUpdated()
    {
        HideEditForm();
        OnLineItemUpdated.InvokeAsync();
    }

    void DeleteLineItem()
    {
        using var context = dbContextFactory.CreateDbContext();
        context.LineItems.Remove(LineItemToShow);
        context.SaveChanges();
        OnLineItemDeleted.InvokeAsync();
    }
}