@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using QuoteEditorBlazor.Areas.Identity.Claims

@inject QuoteEditorBlazor.Data.QuoteEditorContext context

<header class="navbar">
  <AuthorizeView>
    <Authorized>
      <div class="navbar__brand">
        @currentCompanyName
      </div>
      <div class="navbar__name">
        @context.User.Identity.Name
      </div>

      <a class="btn btn--dark" href="/logout">Sign out</a>
    </Authorized>
    <NotAuthorized>
      <a class="btn btn--dark navbar__right" href="/login">Sign in</a>
    </NotAuthorized>
  </AuthorizeView>
</header>

@code {
    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    string currentCompanyName;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;

        if (authState.User.Identity.IsAuthenticated)
        {
            var currentCompanyId = authState.User.Claims.First(c => c.Type == Claims.CompanyID).Value;
            var company = await context.Companies.FindAsync(int.Parse(currentCompanyId));

            currentCompanyName = company.Name;
        }
    }
}

