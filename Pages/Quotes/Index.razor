@page "/quotes"
@attribute [Authorize]

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.SignalR.Client
@using QuoteEditorBlazor.Areas.Identity.Claims

@inject QuoteEditorBlazor.Data.QuoteEditorContext context
@inject NavigationManager Navigation

@implements IAsyncDisposable

<main class="container">
    <div class="header">
        <h1>Quotes</h1>
        <a class="btn btn--primary" @onclick="ShowNewQuoteForm">New quote</a>
    </div>

    @if (shouldShowNewQuoteForm)
    {
        <QuoteEditorBlazor.Shared.Quotes.New OnQuoteCreated="OnQuoteCreated" OnCancel="HideNewQuoteForm" />
    }

    @foreach (var quote in quotes)
    {
        <QuoteEditorBlazor.Shared.Quotes.Quote
            QuoteToShow="quote"
            OnQuoteUpdated="NotifyQuotesChanged"
            OnQuoteDeleted="OnQuoteDeleted"
        />
    }
</main>

@code {
    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    private HubConnection? hubConnection;

    List<QuoteEditorBlazor.Models.Quote> quotes = new List<QuoteEditorBlazor.Models.Quote>();

    bool shouldShowNewQuoteForm = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadQuotes();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/quoteshub"))
            .Build();

        hubConnection.On("QuotesChanged", async () => {
            await LoadQuotes();
        });

        await hubConnection.StartAsync();
    }

    private async Task NotifyQuotesChanged()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("NotifyQuotesChanged");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    async Task LoadQuotes()
    {
        var authState = await authenticationStateTask;
        if (!authState.User.Identity.IsAuthenticated) return;

        var currentCompanyId = authState.User.GetCompanyID();
        quotes = await context.Quotes
            .Where(q => q.CompanyID == int.Parse(currentCompanyId))
            .OrderBy(q => q.ID)
            .ToListAsync();

        StateHasChanged();
    }

    void ShowNewQuoteForm()
    {
        shouldShowNewQuoteForm = true;
    }

    void HideNewQuoteForm()
    {
        shouldShowNewQuoteForm = false;
    }

    async void OnQuoteCreated()
    {
        HideNewQuoteForm();
        await NotifyQuotesChanged();
        await LoadQuotes();
    }

    async void OnQuoteDeleted()
    {
        await NotifyQuotesChanged();
        await LoadQuotes();
    }
}
