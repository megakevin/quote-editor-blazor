@page "/quotes/{quoteId:int}"

@using Microsoft.EntityFrameworkCore
@using QuoteEditorBlazor.State

@inject QuoteEditorBlazor.Data.QuoteEditorContext context
@inject FlashState flashState

<main class="container">
    <a href="/quotes">&larr; Back to quotes</a>
    <div class="header">
        <h1>
            @quote.Name
        </h1>

        <a class="btn btn--primary" @onclick="ShowForm">New date</a>
    </div>

    @if (shouldShowForm)
    {
        <QuoteEditorBlazor.Shared.LineItemDates.New
            QuoteToEdit="quote"
            OnLineItemDateCreated="OnLineItemDateCreated"
            OnCancel="HideForm"
        />
    }

    @if (lineItemDates != null)
    {
        @foreach (var lineItemDate in lineItemDates)
        {
            <QuoteEditorBlazor.Shared.LineItemDates.LineItemDate
                LineItemDateToShow="lineItemDate"
                OnLineItemDateUpdated="OnLineItemDateUpdated"
                OnLineItemDateDeleted="OnLineItemDateDeleted"
            />
        }
    }
</main>

@code {
    [Parameter]
    public int QuoteId { get; set; }

    QuoteEditorBlazor.Models.Quote quote = new QuoteEditorBlazor.Models.Quote();
    List<QuoteEditorBlazor.Models.LineItemDate> lineItemDates = new List<QuoteEditorBlazor.Models.LineItemDate>();

    bool shouldShowForm = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadQuote();
    }

    void ShowForm()
    {
        shouldShowForm = true;
    }

    void HideForm()
    {
        shouldShowForm = false;
    }

    async void OnLineItemDateCreated()
    {
        flashState.AddMessage("Date was successfully created.");

        HideForm();
        //await NotifyQuotesChanged(); TODO: SignalR
        await LoadQuote();
    }

    async void OnLineItemDateUpdated()
    {
        flashState.AddMessage("Date was successfully updated.");
        // await NotifyQuotesChanged(); TODO: SignalR
        await LoadQuote();
    }

    async void OnLineItemDateDeleted()
    {
        flashState.AddMessage("Date was successfully destroyed.");
        // await NotifyQuotesChanged(); TODO: SignalR
        await LoadQuote();
    }

    async Task LoadQuote()
    {
        quote = await context.Quotes.FirstAsync(q => q.ID == QuoteId);

        lineItemDates = await context.LineItemDates
            .Where(lid => lid.QuoteID == QuoteId)
            .OrderBy(lid => lid.Date)
            .ToListAsync();

        StateHasChanged();
    }
}
